import { Octokit } from '@octokit/rest';
import { ENV } from './_core/env';

/**
 * GitHub API client for posting comments and interacting with repositories
 */
export class GitHubClient {
  private octokit: Octokit | null = null;

  constructor() {
    // Initialize Octokit only if GitHub token is available
    if (ENV.githubToken) {
      this.octokit = new Octokit({
        auth: ENV.githubToken,
      });
    } else {
      console.warn('[GitHub] GITHUB_TOKEN not configured. GitHub comment posting will be disabled.');
    }
  }

  /**
   * Check if GitHub client is configured
   */
  isConfigured(): boolean {
    return this.octokit !== null;
  }

  /**
   * Post a comment on a pull request
   *
   * @param owner - Repository owner (e.g., 'facebook')
   * @param repo - Repository name (e.g., 'react')
   * @param prNumber - Pull request number
   * @param comment - Comment body (supports markdown)
   * @returns The created comment or null if failed
   */
  async postPRComment(
    owner: string,
    repo: string,
    prNumber: number,
    comment: string
  ): Promise<{ id: number; html_url: string } | null> {
    if (!this.octokit) {
      console.warn('[GitHub] Cannot post comment: GitHub client not configured');
      return null;
    }

    try {
      console.log(`[GitHub] Posting comment on ${owner}/${repo}#${prNumber}`);

      const response = await this.octokit.rest.issues.createComment({
        owner,
        repo,
        issue_number: prNumber,
        body: comment,
      });

      console.log(`[GitHub] Comment posted successfully: ${response.data.html_url}`);

      return {
        id: response.data.id,
        html_url: response.data.html_url,
      };
    } catch (error) {
      console.error('[GitHub] Failed to post comment:', error);

      if (error instanceof Error) {
        console.error('[GitHub] Error details:', error.message);
      }

      return null;
    }
  }

  /**
   * Format execution result as a markdown comment for GitHub
   *
   * @param executionStatus - The execution status object
   * @param executionId - The execution ID for linking to logs
   * @returns Formatted markdown comment
   */
  formatPRReviewComment(executionStatus: {
    status: string;
    result?: string;
    error?: string;
    duration?: number;
    cost?: number;
  }, executionId: string): string {
    const { status, result, error, duration, cost } = executionStatus;

    // Determine status icon and message
    let statusIcon = '⚠️';
    let statusMessage = 'Review In Progress';

    if (status === 'completed') {
      statusIcon = '✅';
      statusMessage = 'Code Review Completed';
    } else if (status === 'failed') {
      statusIcon = '❌';
      statusMessage = 'Review Failed';
    }

    // Build the comment
    const lines = [
      `## ${statusIcon} ${statusMessage}`,
      '',
      '### Review Details',
      '',
    ];

    if (status === 'completed' && result) {
      // Try to extract key findings from the result
      lines.push('**Review Results:**');
      lines.push('```');
      // Truncate result if too long (GitHub has comment size limits)
      const truncatedResult = result.length > 5000
        ? result.substring(0, 5000) + '\n\n... (truncated)'
        : result;
      lines.push(truncatedResult);
      lines.push('```');
      lines.push('');
    }

    if (error) {
      lines.push('**Error:**');
      lines.push('```');
      lines.push(error);
      lines.push('```');
      lines.push('');
    }

    // Add metadata
    lines.push('### Execution Metadata');
    lines.push('');
    lines.push(`- **Execution ID:** \`${executionId}\``);
    lines.push(`- **Status:** ${status}`);

    if (duration !== undefined) {
      const durationSec = (duration / 1000).toFixed(2);
      lines.push(`- **Duration:** ${durationSec}s`);
    }

    if (cost !== undefined) {
      const costDollars = (cost / 100).toFixed(2);
      lines.push(`- **Cost:** $${costDollars}`);
    }

    lines.push('');
    lines.push('---');
    lines.push('*Generated by Claude Code Service*');

    return lines.join('\n');
  }

  /**
   * Parse repository full name into owner and repo
   *
   * @param fullName - Full repository name (e.g., 'facebook/react')
   * @returns Object with owner and repo, or null if invalid
   */
  parseRepoFullName(fullName: string): { owner: string; repo: string } | null {
    const parts = fullName.split('/');
    if (parts.length !== 2) {
      console.error(`[GitHub] Invalid repository full name: ${fullName}`);
      return null;
    }

    return {
      owner: parts[0],
      repo: parts[1],
    };
  }
}

// Export singleton instance
export const githubClient = new GitHubClient();
